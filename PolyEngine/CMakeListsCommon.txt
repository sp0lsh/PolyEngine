cmake_minimum_required(VERSION 3.2)

# Prepend our modules dir to the path
list(INSERT CMAKE_MODULE_PATH 0 "${ENGINE_ROOT_DIR}/CMakeModules")

##C++ standard
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF) #for portability

##Build types
set(CMAKE_CONFIGURATION_TYPES "Debug;DebugFast;Testing;Release" CACHE STRING "" FORCE)
#Tell CMake which configurations are debug
set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS "Debug;DebugFast")
#CMAKE_BUILD_TYPE is not applicable to VS generators
if(NOT CMAKE_GENERATOR MATCHES "Visual Studio")
	#CMake GUIs may use this to provide a selection widget instead of generic text field
	set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "DebugFast" "Testing" "Release")
	mark_as_advanced(CMAKE_CONFIGURATION_TYPES)
endif()

##
# Are we running CI?
##
set(CI_BUILD FALSE)

if($ENV{TRAVIS})
	if($ENV{TRAVIS} STREQUAL "true")
		set(CI_BUILD TRUE)
	endif()
endif()

if($ENV{APPVEYOR})
	if($ENV{APPVEYOR} STREQUAL "true")
		set(CI_BUILD TRUE)
	endif()
endif()


##
# 32 or 64-bit?
##
if(CMAKE_SIZEOF_VOID_P EQUAL "8")
	set(ARCH_X64 1)
	set(ARCH_X86 0)
else(CMAKE_SIZEOF_VOID_P EQUAL "8")
	set(ARCH_X64 0)
	set(ARCH_X86 1)
endif(CMAKE_SIZEOF_VOID_P EQUAL "8")

# Make sure qt is defined
if(DEFINED ENV{QTDIR})
	list(APPEND CMAKE_PREFIX_PATH $ENV{QTDIR})
elseif(APPLE)
	list(APPEND CMAKE_PREFIX_PATH /usr/local/opt/qt)
else()
	message(FATAL_ERROR "Please setup QTDIR environment variable to point to Qt5 toolchain instalation")
endif()

if (WIN32)
	set(BULLET_ROOT "${ENGINE_ROOT_DIR}/ThirdParty/Bullet")
endif()


##
# Options and whatnot
##

##build type, SIMD
set(CMAKE_BUILD_TYPE "Debug" CACHE STRING
    "Build type. One of: Debug, DebugFast (debug with some optimizations), Testing (heavy optimizations, no debug info), Release (same as Testing, but with all assertions off)"
)
if(ARCH_X64)
	option(SIMD "Enable SSE4.2 extensions for faster code (requires a compatible CPU)" ON)
endif()

##tests, coverage, documentation
option(GENERATE_DOXYGEN "Generate API documentation if Doxygen is available" ON)

##normalize build type settings
string(STRIP "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE)
if(NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
	message(STATUS "Setting build type to Debug as none was specified")
	set(CMAKE_BUILD_TYPE Debug)
elseif(NOT CMAKE_BUILD_TYPE MATCHES "(^Debug$|^DebugFast$|^Testing$|^Release$)")
	message(WARNING "Invalid build type \"${CMAKE_BUILD_TYPE}\" specified!\nValid values are: Debug, DebugFast, Testing, Release.\nDefaulting to Debug.")
	set(CMAKE_BUILD_TYPE Debug)
endif()

##
# Build switches
##
if(CMAKE_CXX_COMPILER_ID MATCHES "(Clang|^GNU$)")
	if(CI_BUILD)
		add_definitions(-DCI_BUILD)
	endif()
	add_compile_options(-pipe)
	add_compile_options(-Wall)
	add_compile_options(-Wextra)
	add_compile_options(-Werror)
	add_compile_options(-Wno-unused-parameter)
	add_compile_options(-Wno-ignored-qualifiers)
	add_compile_options(-fvisibility=hidden)
	add_compile_options(-fvisibility-inlines-hidden)
	add_compile_options($<$<STREQUAL:${CMAKE_GENERATOR},Ninja>:-fdiagnostics-color=always>)
	add_compile_options($<$<OR:$<CONFIG:Debug>,$<CONFIG:DebugFast>>:-g>)
	add_compile_options($<$<OR:$<CONFIG:Debug>,$<CONFIG:DebugFast>>:-fno-omit-frame-pointer>)
	add_compile_options($<$<CONFIG:Debug>:-O0>)
	add_compile_options($<$<CONFIG:DebugFast>:-O1>)
	add_compile_options($<$<OR:$<CONFIG:Testing>,$<CONFIG:Release>>:-O3>)
	add_compile_options($<$<CONFIG:Release>:-DFINAL>) #NOTE(vuko): add_definitions() does not support generator expressions
	add_compile_options($<$<CONFIG:Release>:-mtune=native>)
	set(SIMD_FLAGS -msse4.2 -mfpmath=sse) #note(vuko): $<CXX_COMPILER_ID:comp> and cotire do not get along, see cotire issue #124
	link_libraries($<$<PLATFORM_ID:Linux>:-Wl,--enable-new-dtags>) #use DT_RUNPATH instead of DT_RPATH
	#TODO(vuko): more build type macro definitions (once we decide on them)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	if(CI_BUILD)
		add_definitions(/DCI_BUILD)
	endif()
	add_definitions(/DNOMINMAX /D_SCL_SECURE_NO_WARNINGS /D_CRT_SECURE_NO_WARNINGS) #those macros are useless and just keep messing things up, so disable them
	add_compile_options($<$<CONFIG:Release>:/DFINAL>)

	add_compile_options($<$<OR:$<CONFIG:Debug>,$<CONFIG:DebugFast>>:/MDd>)
	add_compile_options($<$<OR:$<CONFIG:Debug>,$<CONFIG:DebugFast>>:/D_DEBUG>)
	add_compile_options($<$<OR:$<CONFIG:Debug>,$<CONFIG:DebugFast>>:/D_ITERATOR_DEBUG_LEVEL=2>)

	add_compile_options($<$<OR:$<CONFIG:Testing>,$<CONFIG:Release>>:/MD>)
	add_compile_options($<$<OR:$<CONFIG:Testing>,$<CONFIG:Release>>:/D_ITERATOR_DEBUG_LEVEL=0>)
	
	add_compile_options(/EHsc)
	set(SIMD_FLAGS "") #doesn't seem we need them
	if(NOT CMAKE_GENERATOR MATCHES "Visual Studio")
		add_compile_options(/W3 /WX) #warning level 3 (includes lower levels), treat warnings as errors
		add_compile_options($<$<OR:$<CONFIG:Debug>,$<CONFIG:DebugFast>>:/Zi>) #debug symbols
		add_compile_options($<$<CONFIG:Debug>:/Od>)
		add_compile_options($<$<CONFIG:DebugFast>:/O1>)
		add_compile_options($<$<OR:$<CONFIG:Testing>,$<CONFIG:Release>>:/Ox>) #max optimizations
	else()
		#NOTE(vuko): need to define those variables, otherwise CMake encounters internal errors
		set(CMAKE_CXX_FLAGS  "/W3 /WX")
		set(CMAKE_CXX_FLAGS_DEBUG "/Zi /Od")
		set(CMAKE_CXX_FLAGS_DEBUGFAST "/Zi /O1")
		set(CMAKE_CXX_FLAGS_TESTING "/Ox")
		set(CMAKE_CXX_FLAGS_RELEASE "/Ox")
		set(CMAKE_SHARED_LINKER_FLAGS_DEBUGFAST "")
		set(CMAKE_SHARED_LINKER_FLAGS_TESTING "")
		set(CMAKE_EXE_LINKER_FLAGS_DEBUGFAST "")
		set(CMAKE_EXE_LINKER_FLAGS_TESTING "")
	endif()
else()
	message(FATAL_ERROR "Unsupported compiler: ${CMAKE_CXX_COMPILER_ID}")
endif()

##
# Enable CCache if found
##
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
	message(STATUS "ccache will be used: ${CCACHE_FOUND}")
	set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
	set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif(CCACHE_FOUND)

##
# Precompiled headers support (using cotire)
##
include(cotire)
set(COTIRE_MAXIMUM_NUMBER_OF_UNITY_INCLUDES "-j")
if(CCACHE_FOUND AND COMMAND cotire)
	set(ENV{CCACHE_SLOPPINESS} "pch_defines,time_macros")
endif(CCACHE_FOUND AND COMMAND cotire)